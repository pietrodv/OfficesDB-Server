package officeTest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/office") // This means URL's start with /office (after Application path)
public class MainController {
	@Autowired // This means to get the bean called officeRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private OfficeRepository officeRepository;
	
	@PostMapping(path="/add")
	public @ResponseBody
	String addNewOffice (Integer id, @RequestParam String title
			, @RequestParam String description, @RequestParam String price, String photo) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Office n = new Office();
		n.setTitle(title);
		n.setDescription(description);
		n.setPrice(price);
		// path to S3: https://{bucket-name}.s3.{region}.amazonaws.com/{file-name}
        n.setPhoto("https://pdvtest.s3.eu-west-3.amazonaws.com/" + photo);

		//id is automatically assigned, if already present(update instance):
		if (id != null) { n.setId(id); }

		officeRepository.save(n);

		if (n.getId() != null) {
			return "Saved";
		} else {
			return "error";
		}

	}
	
	@GetMapping(path="/all")
	public @ResponseBody
	Iterable<Office> getAllOffices() {
		// This returns a JSON or XML with the offices
		return officeRepository.findAll();
	}

	@GetMapping(path="/getByT")
	public @ResponseBody
	List<Office> getOfficeByTitle(@RequestParam String title) {
		return officeRepository.findOfficesByTitle(title);
	}

	@GetMapping(path="/getById")
	public @ResponseBody
	Optional<Office> getOfficeById(@RequestParam Integer id) {
		return officeRepository.findById(id);
	}

	@Transactional
	@PostMapping(path="/deleteByT")
	public  @ResponseBody
	String deleteOfficeByTitle(@RequestParam String title) {
		officeRepository.deleteOfficeByTitle(title);
		return "Office Deleted";
	}

	@PostMapping(path="/deleteById")
	public  @ResponseBody
	String deleteOfficeById(@RequestParam Integer id) {
		officeRepository.deleteById(id);
		return "Office Deleted";
	}

}
